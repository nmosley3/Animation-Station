Intended Animation: 
Our intention was to create a circus-themed scene, in which there are three different simulations and systems represented. First, we have a fireworks simulation (particle-based system). The forces to guide this object’s behavior are gravity and an explosion which launches the particles. When the user clicks on the screen, a firework moves upwards from the bottom of the screen and explodes into particles. This is also the interactive piece of the scene - the mousePressed() function allows the user to interact with the scene and decide where and with what frequency the fireworks will display. Next, we have a trapeze act simulation (physics-based system). The system simulates a trapeze artist swinging back and forth, using the spring and damping forces. Third, we have a cannonball simulation (particle-based system). The forces applied are gravity and air resistance (friction). This system simulates a cannonball launching from the cannon and flying through a ring of fire.   

Included Classes: 
Group_15_assignment6:
This file serves as the main function for our animation, in which instantiations of each class are created and displayed. We create the objects at the global and setup() levels, and call the object methods (such as display and movement) in the draw() function. In this file, we also instantiated PImage’s to hold the three images we display in our simulation - the Cannon, the Fire Ring and the Trapeze person. 

Trapeze: 
The trapeze class includes attributes and a constructor to create a section of the overall trapeze. The constructor takes four arguments, the first two set the starting x and y position of the rope (indicating where the rope will start swinging from) and the resting x and y position (where the rope will stop oscillating around). The applyForce() method applies the spring and damping forces to the rope. The display() function takes two arguments and draws a line from the class global variables (current x and current y) to the arguments. The spring force and damping force are set as global variables and based on the design of the code can only be changed manually within the class. In order to create a longer and more realistic trapeze, multiple instances of the trapeze class are created in the main file. To connect each instance, each object’s ending point is connected to the next trapeze object’s starting point. Maddie Pellman worked on this portion of the assignment.

Firework:
The firework class creates a single firework object that moves from the bottom of the screen near the x position of the mouse press to the top of the scene. There are 4 arguments in the firework constructor: the x and y position of the firework, and the color. The mousepressed() function takes the x position of the mouse and the height of the scene and passes their values into a firework object, as its x and y position. Within the firework class, upon detonation of the firework, detonateFirework() is called. This function generates the number of particles (a random number generated between 36 and 72), the color of the firework (randomly chosen from an array of colors), and the speed of the particles are random (within a specified range). In the draw loop, display and launchFirework() are both called if the firework has been instantiated. The display method displays the actual shape and translates it from the origin to the desired starting point. The launchFirework() method moves the pshape to the desired explosion height and calls the final class method; detonateFirework() once the desired height is reached. This method connects the firework and particle class and creates particle instances, each with a calculated velocity. Nathan Mosley worked on the Firework class and related functionality. 

Particle: 
The particle class creates a single particle, and each particle is passed a color, x and y position, and x and y velocity. The initial x and y position passed are the positions of the core PShape and the velocities passed are calculated in the detonateFirework() method, both from the firework class. The beginMovement() method applies velocity to the particle and updates the particle’s position accordingly. The display() function instadisplays the particle to the screen. The beginMovement() and display() calls are both in the detonateFirework() method in the firework class. Nathan Mosley worked on this class, as it is part of the firework functionality. 

CannonBall:
The CannonBall class serves to help simulate a cannonball firing at a circus. Attributes include color, x and y coordinates, and velocities. The class also includes a constructor. There are two functions within the class: 1) display() function draws the cannonball at the base of the cannon getting ready to be launched, and 2) launch_cannon() function applies air resistance (friction) and gravity to the velocity of the cannonball and launches it into the air, and changes the cannonball’s color after it goes through the ring of fire. For the purpose of the simulation, the magnitude of the gravity and air resistance (friction) forces are set as global variables in the class and can be modified manually. The air resistance (friction) force slows down the movement of the cannonball through its air trajectory, while the gravity force helps the cannonball move in an arc shape (launch up into the air and move back down through the ring of fire). Rakshana Govindarajan worked on the CannonBall class and related functionality in the Group_15_assignment6 file.

Unexpected Challenges: 
Our group did a great job with time management for this assignment. One challenge we faced was with the trapeze. It was difficult to figure out the design of Trapeze class; for example, did we want to create three separate trapeze objects outside the actual class, or did we want to connect the three separate items as a group Pshape within the actual trapeze class. We decided to create it outside of the class, because implementing within the class limited the number of objects we could combine together. Another challenge was with the firework class. We created a firework class which instantiates the particle class when the firework detonates. The challenge came with connecting the two classes. In our original plan, we had intended to only do a firework class but through implementation found that the best way was to create a separate class that highlighted the denotation of the firework. An additional challenge faced was with the cannonball simulation. We originally wanted to simulate a human cannonball, however there were some challenges applying forces such as gravity and velocity to a vector image of a person, so we decided to develop a cannonball which flies through a ring of fire. 


